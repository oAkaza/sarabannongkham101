<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8">
  <title>üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+Thai&display=swap" rel="stylesheet">
  <style>
    body { font-family: 'Noto Sans Thai', sans-serif; }
  </style>
</head>
<body class="bg-gradient-to-br from-sky-100 via-white to-blue-100 py-10">
  <div class="max-w-6xl mx-auto bg-white shadow-xl rounded-xl p-8 border border-blue-200">
    <h1 class="text-3xl font-bold text-center text-blue-800 mb-6">üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á</h1>

    <div class="flex justify-between mb-4">
      <a href="/dashboard" class="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded shadow">üè† ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å</a>
      <div class="flex gap-2">
        <a href="/certify" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded shadow">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á</a>
        <a href="/certify/export" class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded shadow">üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel</a>
      </div>
    </div>

    <div class="relative mb-4 max-w-md">
  <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-xl">
    üîç
  </span>
  <input
    type="text"
    id="searchInput"
    placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..."
    onkeyup="filterData()"
    class="w-full pl-10 pr-4 py-2 border border-blue-300 rounded shadow focus:outline-none focus:ring-2 focus:ring-blue-300"
  />
</div>


    <div class="overflow-x-auto">
      <table class="min-w-full table-auto border border-blue-300">
        <thead class="bg-blue-200 text-blue-900">
          <tr>
            <th class="border px-4 py-2">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á</th>
            <th class="border px-4 py-2">‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á</th>
            <th class="border px-4 py-2">‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
            <th class="border px-4 py-2">‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥</th>
            <th class="border px-4 py-2">PDF</th>
            <th class="border px-4 py-2">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
          </tr>
        </thead>
        <tbody id="certifyTable">
          <% data.forEach((item, index) => { %>
            <tr class="text-center even:bg-blue-50 row-data">
              <td class="border px-2 py-1"><%= item.certifyNo %></td>
              <td class="border px-2 py-1 text-left"><%= item.subject || '-' %></td>
              <td class="border px-2 py-1"><%= item.certifyDate || '-' %></td>
              <td class="border px-2 py-1"><%= item.action || '-' %></td>
              <td class="border px-2 py-1">
                <% if (item.pdfFile) { %>
                  <a href="/uploads/<%= item.pdfFile %>" target="_blank" class="text-blue-600 underline">‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå</a>
                <% } else { %> - <% } %>
              </td>
              <td class="border px-2 py-1">
  <div class="flex items-center justify-center gap-1">
    <a href="/certify/edit/<%= index %>" class="px-2 py-1 bg-green-600 hover:bg-green-700 text-white rounded text-xs">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</a>
    <button type="button"
      class="px-2 py-1 bg-red-600 hover:bg-red-700 text-white rounded text-xs btn-delete"
      data-index="<%= index %>" data-docno="<%= item.certifyNo %>">‡∏•‡∏ö</button>
  </div>
</td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>

    <div id="pagination" class="flex justify-center mt-6 space-x-2"></div>
  </div>

  <script>
    const rows = document.querySelectorAll(".row-data");
    const rowsPerPage = 20;
    let currentPage = 1;

    function displayPage(page) {
      const start = (page - 1) * rowsPerPage;
      const end = page * rowsPerPage;
      rows.forEach((row, i) => {
        row.style.display = i >= start && i < end ? "" : "none";
      });
    }

    function setupPagination() {
      const totalPages = Math.ceil(rows.length / rowsPerPage);
      const pagination = document.getElementById("pagination");
      pagination.innerHTML = "";

      if (currentPage > 1) {
        const prevBtn = document.createElement("button");
        prevBtn.innerHTML = "¬´ ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö";
        prevBtn.className = "px-3 py-1 rounded bg-blue-400 text-white hover:bg-blue-500";
        prevBtn.onclick = () => {
          currentPage--;
          displayPage(currentPage);
          setupPagination();
        };
        pagination.appendChild(prevBtn);
      }

      for (let i = 1; i <= totalPages; i++) {
        const btn = document.createElement("button");
        btn.textContent = i;
        btn.className = `px-3 py-1 rounded ${
          i === currentPage ? "bg-blue-700 text-white" : "bg-blue-300 text-white hover:bg-blue-400"
        }`;
        btn.onclick = () => {
          currentPage = i;
          displayPage(currentPage);
          setupPagination();
        };
        pagination.appendChild(btn);
      }

      if (currentPage < totalPages) {
        const nextBtn = document.createElement("button");
        nextBtn.innerHTML = "‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ¬ª";
        nextBtn.className = "px-3 py-1 rounded bg-blue-400 text-white hover:bg-blue-500";
        nextBtn.onclick = () => {
          currentPage++;
          displayPage(currentPage);
          setupPagination();
        };
        pagination.appendChild(nextBtn);
      }
    }

    function filterData() {
      const search = document.getElementById("searchInput").value.toLowerCase();
      rows.forEach(row => {
        const text = row.innerText.toLowerCase();
        row.style.display = text.includes(search) ? "" : "none";
      });
    }
  document.querySelectorAll('.btn-delete').forEach(btn => {
    btn.addEventListener('click', async () => {
      const index = btn.dataset.index;
      const docNo = btn.dataset.docno;

      const { value: password } = await Swal.fire({
        title: `‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (${docNo})`,
        input: 'password',
        inputLabel: '‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö',
        inputPlaceholder: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô',
        showCancelButton: true,
        confirmButtonText: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö',
        cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
      });

      if (!password) return;

      fetch(`/certify/delete/${index}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ confirmPassword: password })
      }).then(res => {
        if (res.ok) {
          Swal.fire({
            icon: 'success',
            title: '‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
            text: `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ${docNo} ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß`,
            timer: 2000,
            showConfirmButton: false
          }).then(() => location.reload());
        } else if (res.status === 403) {
          Swal.fire({
            icon: 'error',
            title: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
            text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
          });
        } else {
          Swal.fire({
            icon: 'error',
            title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
            text: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ'
          });
        }
      });
    });
  });
</script>
</body>
</html>
