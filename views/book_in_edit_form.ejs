<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8" />
  <title>‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+Thai&display=swap" rel="stylesheet" />
  <style>body { font-family: 'Noto Sans Thai', sans-serif; }</style>
</head>
<body class="bg-gradient-to-br from-yellow-100 via-white to-yellow-200 py-10">
  <div class="max-w-3xl mx-auto bg-white shadow-xl rounded-xl p-8 border border-yellow-300">
    <h1 class="text-2xl font-bold text-yellow-800 mb-6 text-center">‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö</h1>

    <form method="POST" action="/book-in/edit/<%= index %>" enctype="multipart/form-data" class="space-y-5">

      <input type="text" name="registerNo" required placeholder="‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏±‡∏ö" value="<%= item.registerNo %>" class="w-full p-2 border rounded" />
      <input type="date" name="receiveDate" value="<%= item.receiveDate || '' %>" class="w-full p-2 border rounded" />
      <input type="text" name="docNo" placeholder="‡∏ó‡∏µ‡πà‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠" value="<%= item.docNo || '' %>" class="w-full p-2 border rounded" />
      <input type="text" name="from" placeholder="‡∏à‡∏≤‡∏Å" value="<%= item.from || '' %>" class="w-full p-2 border rounded" />
      <input type="text" name="subject" placeholder="‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á" value="<%= item.subject || '' %>" class="w-full p-2 border rounded" />

      <select name="action" class="w-full p-2 border rounded">
        <option value="">-- ‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥ --</option>
        <% const units = ["‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏õ‡∏•‡∏±‡∏î", "‡∏Å‡∏≠‡∏á‡∏Ñ‡∏•‡∏±‡∏á", "‡∏Å‡∏≠‡∏á‡∏ä‡πà‡∏≤‡∏á", "‡∏Å‡∏≠‡∏á‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏á‡∏Ñ‡∏°", "‡∏Å‡∏≠‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç", "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô", "‡∏ô‡∏¥‡∏ï‡∏¥‡∏Å‡∏£", "‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô", "‡∏ù‡πà‡∏≤‡∏¢‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô", "‡∏ù‡πà‡∏≤‡∏¢‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•", "‡∏ù‡πà‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"]; %>
        <% units.forEach(unit => { %>
          <option value="<%= unit %>" <%= item.action === unit ? 'selected' : '' %>><%= unit %></option>
        <% }) %>
      </select>

      <div>
        <label class="block font-medium mb-1">‡πÅ‡∏ô‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF (‡πÅ‡∏ô‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï)</label>
        <input type="file" name="pdfFile" accept=".pdf" class="w-full" />
        <% if (item.pdfFile) { %>
          <p class="text-sm mt-1">üìÑ ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°: <a href="/uploads/<%= item.pdfFile %>" target="_blank" class="underline text-blue-600"><%= item.pdfFile %></a></p>
        <% } %>
      </div>

      <div class="text-center">
  <label class="block font-medium mb-2">‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô</label>

  <div class="inline-block rounded-xl shadow-inner p-2 bg-white">
    <canvas id="signature" width="400" height="150" class="rounded-xl"></canvas>
  </div>

  <div class="mt-2">
    <button type="button" onclick="clearSignature()" class="bg-red-500 hover:bg-red-600 text-white px-4 py-1 rounded shadow">
      ‡∏•‡πâ‡∏≤‡∏á‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô
    </button>
  </div>

  <input type="hidden" name="signatureData" id="signatureData" />
</div>

      <div class="text-center">
        <button type="submit" class="bg-yellow-600 hover:bg-yellow-700 text-white px-6 py-2 rounded font-semibold shadow">
          üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        </button>
      </div>
    </form>
  </div>

  <script>
  const canvas = document.getElementById('signature');
  const ctx = canvas.getContext('2d');
  let drawing = false;

  ctx.lineWidth = 2;
  ctx.lineCap = 'round';
  ctx.strokeStyle = '#111';

  canvas.addEventListener('mousedown', (e) => {
    drawing = true;
    const rect = canvas.getBoundingClientRect();
    ctx.beginPath();
    ctx.moveTo(e.clientX - rect.left, e.clientY - rect.top);
  });

  canvas.addEventListener('mousemove', (e) => {
    if (!drawing) return;
    const rect = canvas.getBoundingClientRect();
    ctx.lineTo(e.clientX - rect.left, e.clientY - rect.top);
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(e.clientX - rect.left, e.clientY - rect.top);
  });

  canvas.addEventListener('mouseup', () => {
    drawing = false;
    saveSignatureToInput();
  });

  canvas.addEventListener('mouseleave', () => {
    drawing = false;
  });

  canvas.addEventListener('touchstart', (e) => {
    e.preventDefault();
    drawing = true;
    const rect = canvas.getBoundingClientRect();
    const touch = e.touches[0];
    ctx.beginPath();
    ctx.moveTo(touch.clientX - rect.left, touch.clientY - rect.top);
  });

  canvas.addEventListener('touchmove', (e) => {
    e.preventDefault();
    if (!drawing) return;
    const rect = canvas.getBoundingClientRect();
    const touch = e.touches[0];
    ctx.lineTo(touch.clientX - rect.left, touch.clientY - rect.top);
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(touch.clientX - rect.left, touch.clientY - rect.top);
  });

  canvas.addEventListener('touchend', () => {
    drawing = false;
    saveSignatureToInput();
  });

  function clearSignature() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    document.getElementById('signatureData').value = '';
  }

  function saveSignatureToInput() {
    const dataURL = canvas.toDataURL('image/png');
    document.getElementById('signatureData').value = dataURL;
  }

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  const oldSig = "<%= item.signature ? item.signature : '' %>";
  if (oldSig.startsWith("data:image")) {
    const img = new Image();
    img.src = oldSig;
    img.onload = () => {
      ctx.drawImage(img, 0, 0);
      // ‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ‡πÉ‡∏ô hidden input
      document.getElementById('signatureData').value = oldSig;
    };
  }
</script>

</body>
</html>
